name: Windows VPS - Robust Setup
on: workflow_dispatch

jobs:
  windows-vps:
    runs-on: windows-latest
    timeout-minutes: 60
    
    steps:
    - name: Complete VPS Setup with Error Handling
      run: |
        try {
            # Set PowerShell execution policy first
            Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
            
            Write-Host "=== Starting Windows VPS Setup ==="
            
            # Enable RDP with detailed logging
            Write-Host "Enabling Remote Desktop..."
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0 -ErrorAction Stop
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction Stop
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 0
            
            # Create user account with proper permissions
            Write-Host "Creating RDP user account..."
            $Username = "vpsuser"
            $Password = ConvertTo-SecureString "${{ secrets.WINDOWS_USER_PASSWORD }}" -AsPlainText -Force
            
            # Remove existing user if present
            if (Get-LocalUser -Name $Username -ErrorAction SilentlyContinue) {
                Remove-LocalUser -Name $Username -ErrorAction SilentlyContinue
            }
            
            New-LocalUser -Name $Username -Password $Password -FullName "VPS User" -PasswordNeverExpires -ErrorAction Stop
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $Username -ErrorAction Stop
            Add-LocalGroupMember -Group "Administrators" -Member $Username -ErrorAction Stop
            
            # Start RDP services explicitly
            Write-Host "Starting Terminal Services..."
            Start-Service TermService -ErrorAction Stop
            Start-Service UmRdpService -ErrorAction SilentlyContinue
            
            # Download and setup ngrok with comprehensive error handling
            Write-Host "Setting up ngrok tunnel..."
            $ngrokUrl = "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip"
            Invoke-WebRequest -Uri $ngrokUrl -OutFile "ngrok.zip" -ErrorAction Stop
            Expand-Archive ngrok.zip -DestinationPath . -Force -ErrorAction Stop
            
            # Authenticate ngrok
            .\ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
            
            # Start ngrok tunnel with proper background handling
            Write-Host "Starting ngrok tunnel..."
            $ngrokProcess = Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389 --log stdout" -WindowStyle Hidden -PassThru
            
            Write-Host "ngrok process started with PID: $($ngrokProcess.Id)"
            
            # Wait for tunnel to establish with timeout
            $timeout = 30
            $timer = 0
            $tunnelEstablished = $false
            
            do {
                Start-Sleep 2
                $timer += 2
                try {
                    $tunnels = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
                    if ($tunnels.tunnels.Count -gt 0) {
                        Write-Host "=== TUNNEL ESTABLISHED ==="
                        $tunnels.tunnels | ForEach-Object {
                            Write-Host "RDP Connection: $($_.public_url)"
                            Write-Host "Username: $Username"
                            Write-Host "Password: [Your WINDOWS_USER_PASSWORD secret]"
                        }
                        $tunnelEstablished = $true
                        break
                    }
                } catch {
                    Write-Host "Waiting for ngrok API... ($timer/$timeout seconds)"
                }
            } while ($timer -lt $timeout)
            
            if (-not $tunnelEstablished) {
                throw "Failed to establish ngrok tunnel within $timeout seconds"
            }
            
            Write-Host "=== VPS SETUP COMPLETE ==="
            Write-Host "Connection Details Above - Save Them Now!"
            
            # Keep alive with monitoring
            $counter = 0
            while ($true) {
                Start-Sleep 60
                $counter++
                
                # Verify processes are still running
                $ngrokRunning = Get-Process -Id $ngrokProcess.Id -ErrorAction SilentlyContinue
                $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
                
                Write-Host "[$counter min] ngrok: $(if($ngrokRunning){'Running'}else{'Stopped'}) | RDP: $($rdpService.Status)"
                
                # Restart ngrok if it stopped
                if (-not $ngrokRunning) {
                    Write-Host "Restarting ngrok..."
                    $ngrokProcess = Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389" -WindowStyle Hidden -PassThru
                }
                
                # Health check every 5 minutes
                if ($counter % 5 -eq 0) {
                    try {
                        $tunnels = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
                        Write-Host "Health check: $($tunnels.tunnels.Count) active tunnels"
                    } catch {
                        Write-Host "Health check failed - tunnel may be down"
                    }
                }
            }
        }
        catch {
            Write-Host "=== SETUP FAILED ==="
            Write-Host "Error: $($_.Exception.Message)"
            
            # Diagnostic information
            Write-Host "=== DIAGNOSTIC INFO ==="
            Get-Service -Name "TermService" -ErrorAction SilentlyContinue | Format-Table
            Get-Process -Name "*ngrok*" -ErrorAction SilentlyContinue | Format-Table
            
            # Show any ngrok logs if available
            if (Test-Path "ngrok.log") {
                Write-Host "ngrok logs:"
                Get-Content "ngrok.log" -Tail 20
            }
            
            exit 1
        }
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        WINDOWS_USER_PASSWORD: ${{ secrets.WINDOWS_USER_PASSWORD }}
